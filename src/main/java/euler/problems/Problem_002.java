package euler.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

public class Problem_002 {

    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    // Solution: 4613732

    static final int MAX = 4000000;

    public static void main(String[] args) {
        System.out.println("Problem 002 - Even Fibonacci Numbers");

        List<Integer> fibonacciNumbers = firstNthFibonacciNumbers(MAX);
        IntStream fibonacciStream = fibonacciNumbers.stream().mapToInt(Integer::intValue);

        int result = removeOddNumbers(fibonacciStream).sum();

        System.out.println("Solution: " + result);
    }

    public static IntStream removeOddNumbers(IntStream numbers) {
        return numbers.filter(x -> x % 2 == 0);
    }

    public static List<Integer> firstNthFibonacciNumbers(int max) {
        List<Integer> numbers = new ArrayList<>();

        int fib = 0;
        int fib2 = 1;

        while(fib <= max) {
            numbers.add(fib);

            int tmp = fib2;
            fib2 += fib;
            fib = tmp;
        }

        return numbers;
    }

}
